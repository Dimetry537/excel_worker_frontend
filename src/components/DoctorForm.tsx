import { useEffect, useState } from "react";
import {
  createDoctor,
  getDoctors,
  deleteDoctor,
  updateDoctor,
  toggleDoctor,
} from "../api/doctors";
import type { Doctor } from "../api/doctors";

export default function DoctorForm() {
  const [doctors, setDoctors] = useState<Doctor[]>([]);
  const [name, setName] = useState("");
  const [editingId, setEditingId] = useState<number | null>(null);
  const [showInactive, setShowInactive] = useState(false);

  const fetchDoctors = async () => {
    try {
      const data = await getDoctors();
      setDoctors(data);
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Ä–∞—á–µ–π:", error);
    }
  };

  useEffect(() => {
    fetchDoctors();
  }, []);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    try {
      if (editingId !== null) {
        await updateDoctor(editingId, { full_name: name });
        setEditingId(null);
      } else {
        await createDoctor({ full_name: name });
      }
      setName("");
      await fetchDoctors();
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏:", error);
    }
  };

  const handleDelete = async (id: number) => {
    if (!confirm("–£–¥–∞–ª–∏—Ç—å –≤—Ä–∞—á–∞?")) return;
    try {
      await deleteDoctor(id);
      await fetchDoctors();
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏:", error);
    }
  };

  const handleEdit = (doctor: Doctor) => {
    setEditingId(doctor.id);
    setName(doctor.full_name);
  };

  const handleToggleActive = async (id: number) => {
    try {
      await toggleDoctor(id);
      await fetchDoctors();
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:", error);
    }
  };

  const filteredDoctors = showInactive
    ? doctors
    : doctors.filter((doc) => doc.is_active);

  return (
    <div>
      <div>
        <h2>
          {editingId ? "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Ä–∞—á–∞" : "–î–æ–±–∞–≤–∏—Ç—å –≤—Ä–∞—á–∞"}
        </h2>

        <form onSubmit={handleSubmit}>
          <input
            value={name}
            onChange={(e) => setName(e.target.value)}
            placeholder="–§–ò–û –≤—Ä–∞—á–∞"
          />
          <button
            type="submit"
          >
            {editingId ? "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å" : "–î–æ–±–∞–≤–∏—Ç—å"}
          </button>
          {editingId !== null && (
            <button
              type="button"
              onClick={() => {
                setEditingId(null);
                setName("");
              }}
            >
              –û—Ç–º–µ–Ω–∞
            </button>
          )}
        </form>

        <div>
          <label>
            <input
              type="checkbox"
              checked={showInactive}
              onChange={(e) => setShowInactive(e.target.checked)}
            />
            –ü–æ–∫–∞–∑–∞—Ç—å —Å–∫—Ä—ã—Ç—ã—Ö
          </label>
        </div>

        <ul>
          {filteredDoctors.map((doc) => (
            <li
              key={doc.id}
            >
              <span>{doc.full_name}</span>
              <div>
                <button
                  onClick={() => handleEdit(doc)}
                >
                  ‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
                </button>
                <button
                  onClick={() => handleToggleActive(doc.id)}
                >
                  {doc.is_active ? "üôà –°–∫—Ä—ã—Ç—å" : "üëÅ –ü–æ–∫–∞–∑–∞—Ç—å"}
                </button>
                <button
                  onClick={() => handleDelete(doc.id)}
                >
                  üóë –£–¥–∞–ª–∏—Ç—å
                </button>
              </div>
            </li>
          ))}
        </ul>
      </div>
    </div>
  );
}
